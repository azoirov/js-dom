let fs = require("fs");
let fsP = require("fs/promises");

class UserSystem {
  constructor(name, dirname) {
    __dirname = dirname;
    this.folderName = `${__dirname}/db/${name}`;
    this.fileName = `/${name}.json`;
    this.file = `${this.folderName}${this.fileName}`;
    this.defaultObj = { users: [] };
    this.#createDb();
  }

  async createUser(name, age, langs = []) {
    try {
      let x = await this.#createDb();
      let file = await this.#readFile(this.file);
      let newUser = {
        id: file.users.length + 1,
        name: name,
        age: age,
        langs: langs,
      };
      file.users.push(newUser);
      this.#writeFile(this.file, JSON.stringify(file));
    } catch (e) {
      throw new Error(e);
    }
  }

  async select(key, value) {
    let file = await this.#readFile(this.file);
    value = typeof value == "string" ? value.toLowerCase() : value;
    let result = file.users.filter((element) => {
      element[key] =
        typeof element[key] == "string"
          ? element[key].toLowerCase()
          : element[key];
      return element[key] == value;
    });
    console.log(result);
  }

  async filter(obj) {
    let file = await this.#readFile(this.file);
    let item = Object.keys(obj);
    let result;
    if (obj["langs"]) {
      result = file.users.filter((element) => {
        if (
          (item[0] != "langs"
            ? obj[item[0]] === element[item[0]]
            : obj[item[5]] === element[item[5]]) &&
          (item[1] != "langs"
            ? obj[item[1]] === element[item[1]]
            : obj[item[2]] === element[item[2]]) &&
          (item[3] != "langs"
            ? obj[item[3]] === element[item[3]]
            : obj[item[4]] === element[item[4]])
        ) {
          let langsIncluded = obj["langs"].filter((item) =>
            element["langs"].includes(item)
          );
          return langsIncluded.length == obj["langs"].length;
        }
      });
    } else {
      if (!obj["id"]) {
        result = file.users.filter(
          (element) =>
            obj["name"] === element["name"] && obj["age"] === element["age"]
        );
      } else {
        if (item.length === 3) {
          result = file.users.filter(
            (element) =>
              obj["name"] === element["name"] &&
              obj["age"] === element["age"] &&
              obj["id"] === element["id"]
          );
        } else if (item.length === 2) {
          result = file.users.filter(
            (element) =>
              obj[item[0]] === element[item[0]] &&
              obj[item[1]] === element[item[1]]
          );
        }
      }
    }
    if (item.length === 1) {
      result = file.users.filter(
        (element) => obj[item[0]] === element[item[0]]
      );
    }
    console.log(result);
  }

  async addLang(id, lang) {
    let file = await this.#readFile(this.file);
    if (typeof lang == "object") {
      file.users[id - 1]["langs"] = lang;
    } else {
      file.users[id - 1]["langs"].push(lang);
    }
    this.#writeFile(this.file, JSON.stringify(file));
  }

  async deleteUser(key, value) {
    let file = await this.#readFile(this.file);
    value = typeof value == "string" ? value.toLowerCase() : value;
    let result = file.users.filter((element) => {
      element[key] =
        typeof element[key] == "string"
          ? element[key].toLowerCase()
          : element[key];
      return element[key] !== value;
    });
    file.users = result;
    this.#writeFile(this.file, JSON.stringify(file));
  }

  async rmDb() {
    try {
      let rmFile = await fsP.unlink(this.file);
      let rmDir = await fsP.rmdir(this.folderName);
    } catch (e) {
      throw new Error(e);
    }
  }

  async #createDb() {
    if (!fs.existsSync(__dirname + "/db")) {
      this.#mkDir(__dirname + "/db");
    }
    if (!fs.existsSync(this.file)) {
      let x = await this.#mkDir(this.folderName);
      this.#writeFile(
        `${this.folderName}${this.fileName}`,
        JSON.stringify(this.defaultObj)
      );
      return x;
    }
  }

  async #writeFile(file, data) {
    try {
      let res = await fsP.writeFile(file, data);
      return res;
    } catch (e) {
      throw new Error(e);
    }
  }

  async #readFile(file) {
    try {
      let res = await fsP.readFile(file, "utf8", (error, result) => {
        return result;
      });
      let data = JSON.parse(res);
      return data;
    } catch (e) {
      throw new Error(e);
    }
  }

  async #mkDir(file) {
    try {
      let res = await fsP.mkdir(file, { recursive: true }, (err) => {
        if (err) throw err;
      });
      return res;
    } catch (e) {
      throw new Error(e);
    }
  }
}

module.exports = UserSystem;
